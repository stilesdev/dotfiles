#!/usr/bin/env bash

PKG_BASE="systemd-boot-pacman-hook pacman-contrib zip unzip htop openssh vim git zsh imagemagick jq smbclient cronie usbutils neofetch powerline-go rsync"
PKG_GRAPHICS_NVIDIA="nvidia nvidia-utils lib32-nvidia-utils"
PKG_GRAPHICS_AMD="xf86-video-amdgpu mesa lib32-mesa vulkan-radeon"
PKG_GRAPHICS_INTEL="xf86-video-intel mesa lib32-mesa"
PKG_BLUETOOTH="blueman"
PKG_LAPTOP="thermald tlp xf86-input-libinput xorg-xbacklight"
PKG_DOCKER="docker docker-compose"
PKG_GUI_BASE="xorg-server xorg-xrdb xorg-xev xorg-xmodmap xcursor-neutral i3-gaps polybar picom feh ulauncher lightdm lightdm-slick-greeter betterlockscreen qt5-base arc-gtk-theme arc-icon-theme gnome-themes-extra gtk-engine-murrine qt5-styleplugins"
PKG_GUI_APPS="arandr autorandr konsole kcalc thunar tumbler ffmpegthumbnailer scrot google-chrome jetbrains-toolbox code synergy yubioath-desktop xclip numlockx insomnia seahorse kwalletmanager flameshot vlc eog onlyoffice-bin"
PKG_AUDIO="alsa-utils pulseaudio pavucontrol pulseaudio-equalizer-ladspa playerctl python-dbus"
PKG_PRINTING="cups hplip"
PKG_YUBIKEY="gnupg pinentry pcsclite ccid libusb-compat gcr libfido2"
PKG_WORK_APPS="autossh evolution evolution-ews freerdp git-lfs kcachegrind libvncserver nmap postgresql-client remmina storageexplorer subversion teams"

PKG_RETIRED="superproductivity-bin libu2f-host rofi moka-icon-theme-git faba-icon-theme-git libreoffice-still"

NERD_FONTS='"Hack","Hasklig","Overpass","SourceCodePro"'

VSCODE_EXTENSIONS="formulahendry.auto-close-tag ms-azuretools.vscode-docker octref.vetur ph-hawkins.arc-plus PKief.material-icon-theme"

GRAPHICS='none'
HAS_BLUETOOTH=false
IS_LAPTOP=false
IS_DOCKER_HOST=false
IS_WORK_MACHINE=false

case $(hostname) in
arcade*)
    GRAPHICS='intel'
    HAS_BLUETOOTH=true
    IS_LAPTOP=true
    IS_DOCKER_HOST=true
    ;;
bismuth*)
    GRAPHICS='nvidia'
    IS_DOCKER_HOST=true
    ;;
builder* | encom* | hub*)
    IS_DOCKER_HOST=true
    ;;
jstiles-archlinux*)
    GRAPHICS='amd'
    IS_DOCKER_HOST=true
    IS_WORK_MACHINE=true
    ;;
esac

PACKAGES="$PKG_BASE"
USE_GUI=true

if [ "$GRAPHICS" = 'intel' ]; then
    PACKAGES="$PACKAGES $PKG_GRAPHICS_INTEL"
elif [ "$GRAPHICS" = 'nvidia' ]; then
    PACKAGES="$PACKAGES $PKG_GRAPHICS_NVIDIA"
elif [ "$GRAPHICS" = 'amd' ]; then
    PACKAGES="$PACKAGES $PKG_GRAPHICS_AMD"
else
    USE_GUI=false
fi

if ($HAS_BLUETOOTH); then
    PACKAGES="$PACKAGES $PKG_BLUETOOTH"
fi

if ($IS_LAPTOP); then
    PACKAGES="$PACKAGES $PKG_LAPTOP"
fi

if ($IS_DOCKER_HOST); then
    PACKAGES="$PACKAGES $PKG_DOCKER"
fi

if ($USE_GUI); then
    PACKAGES="$PACKAGES $PKG_GUI_BASE $PKG_GUI_APPS $PKG_AUDIO $PKG_PRINTING $PKG_YUBIKEY"
fi

if ($IS_WORK_MACHINE); then
    PACKAGES="$PACKAGES $PKG_WORK_APPS"
fi

echo "Setting shell to zsh"
sudo chsh -s /bin/zsh $USER

echo "Configuring yay"
yay --removemake --sudoloop --save

echo "Installing packages"
yay --noconfirm --needed -S $PACKAGES || exit $?

echo "Removing retired packages"
yay --noconfirm -Rs $PKG_RETIRED

echo "Processing yadm alternates and templates"
if ($IS_WORK_MACHINE); then
    yadm config local.class Work
else
    yadm config local.class Personal
fi
yadm alt

echo "Installing nvm"
nvm_version=$(curl -sS https://api.github.com/repos/nvm-sh/nvm/releases/latest | jq -r '.tag_name')
curl -sS -o- https://raw.githubusercontent.com/nvm-sh/nvm/$nvm_version/install.sh | bash

echo "Configuring cronie"
sudo systemctl enable cronie.service
sudo systemctl start cronie.service

echo "Configuring sshd"
sudo sed -i "s/^#\?\(PermitRootLogin\).*$/\1 no/" /etc/ssh/sshd_config
sudo sed -i "s/^#\?\(AllowAgentForwarding\).*$/\1 yes/" /etc/ssh/sshd_config
if grep "^#\?StreamLocalBindUnlink" /etc/ssh/sshd_config; then
    sudo sed -i "s/^#\?\(StreamLocalBindUnlink\).*$/\1 yes/" /etc/ssh/sshd_config
else
    echo "StreamLocalBindUnlink yes" | sudo tee -a /etc/ssh/sshd_config > /dev/null
fi
sudo systemctl enable sshd.service

if ($IS_LAPTOP); then
    echo "Configuring thermald"
    sudo systemctl enable thermald.service

    echo "Configuring tlp"
    sudo systemctl enable tlp.service
    sudo systemctl mask systemd-rfkill.service
    sudo systemctl mask systemd-rfkill.socket

    echo "Configuring touchpad"
    sudo cp $HOME/.config/yadm/30-touchpad.conf /etc/X11/xorg.conf.d/
    sudo chown root:root /etc/X11/xorg.conf.d/30-touchpad.conf
    sudo chmod 644 /etc/X11/xorg.conf.d/30-touchpad.conf
fi

if ($IS_DOCKER_HOST); then
    echo "Configuring docker"
    sudo systemctl enable docker
    sudo systemctl start docker
    sudo usermod -a -G docker $USER
fi

if ($USE_GUI); then
    echo "Installing Spotify (workaround for GPG importing issue)"
    if ! yay --noconfirm --needed -S spotify; then
        grep validpgpkeys $HOME/.cache/yay/spotify/.SRCINFO | sed "s/[[:space:]]*validpgpkeys =[[:space:]]*//" | xargs -p -I % bash -c 'gpg --keyserver keys.gnupg.net --recv-keys %'
        yay --noconfirm --needed -S spotify || exit $?
    fi

    echo "Downloading and installing Nerd Fonts"
    yay --noconfirm --needed -S fontforge
    CWD=$(pwd)
    mkdir -p /tmp/fonts && cd /tmp/fonts
    for FONT_URL in $(curl -Ss "https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest" | jq -r ".assets[] | select(.name | contains($NERD_FONTS)) | .browser_download_url"); do
        echo "Downloading $FONT_URL"
        curl -LOJ "$FONT_URL"
    done
    for FONT_ZIP in /tmp/fonts/*.zip; do
        FONT_NAME=$(basename $FONT_ZIP .zip)
        echo "Installing $FONT_NAME"
        sudo rm -r "/usr/share/fonts/$FONT_NAME"
        unzip -q "$FONT_ZIP"
        sudo install -o root -g root -d "/usr/share/fonts/$FONT_NAME"

        if [ "$FONT_NAME" = "Overpass" ]; then
            echo "  Removing incorrect glyphs from $FONT_NAME"
            mkdir /tmp/fonts/patched
            for input in *Complete.otf; do
                python $HOME/.scripts/remove-incorrect-nerd-font-glyphs.py "$input" "/tmp/fonts/patched/$input" > /dev/null 2>&1
            done
            rm -f /tmp/fonts/*.otf
            mv /tmp/fonts/patched/*.otf /tmp/fonts
            rm -rf /tmp/fonts/patched
        fi

        if ls /tmp/fonts/*Complete.ttf > /dev/null 2>&1; then
            sudo install -o root -g root -m 644 -t "/usr/share/fonts/$FONT_NAME" *Complete.ttf
        else
            sudo install -o root -g root -m 644 -t "/usr/share/fonts/$FONT_NAME" *Complete.otf
        fi
        rm -f /tmp/fonts/*.otf /tmp/fonts/*.ttf
    done
    cd "$CWD"
    rm -rf /tmp/fonts
    fc-cache -v
    yay --noconfirm -Rs fontforge

    echo "Configuring lightdm"
    sudo sed -i "s/^\#\?\(greeter\-session=\).*$/\1lightdm\-slick\-greeter/" /etc/lightdm/lightdm.conf
    sudo systemctl enable lightdm.service

    echo "Configuring icon theme"
    dconf write /org/gnome/desktop/interface/icon-theme "'Arc'"

    echo "Configuring synergy client to start on login screen"
    if ! grep "^greeter-setup-script=/usr/bin/synergyc" /etc/lightdm/lightdm.conf; then
        echo -n "Default Synergy server hostname: "
        read synergy_host
        echo -e "\n[SeatDefaults]\ngreeter-setup-script=/usr/bin/synergyc --enable-crypto $synergy_host" | sudo tee -a /etc/lightdm/lightdm.conf
    fi

    echo "Creating screenshots directory"
    mkdir -p ~/Pictures/Screenshots

    echo "Creating wallpapers directory and generating placeholder wallpaper"
    if ! [ "$(ls -A $HOME/Pictures/Wallpapers 2>/dev/null)" ]; then
        mkdir -p ~/Pictures/Wallpapers
        convert -size 1920x1080 xc:#393f4c ~/Pictures/Wallpapers/placeholder.jpg
        betterlockscreen -u $HOME/Pictures/Wallpapers/placeholder.jpg
    fi

    echo "Installing VSCode extensions"
    for ext in $VSCODE_EXTENSIONS; do
        if code --list-extensions | grep "$ext" > /dev/null; then
            echo "    $ext already installed"
        else
            echo "    installing $ext"
            code --install-extension "$ext"
        fi
    done

    echo "Setting up GPG key"
    systemctl --user mask --now gpg-agent.service gpg-agent.socket gpg-agent-ssh.socket gpg-agent-extra.socket gpg-agent-browser.socket
    sudo systemctl enable pcscd
    sudo systemctl start pcscd
    if ! gpg --card-status; then
        echo "Failed to detect YubiKey. Plug in the YubiKey and try running the bootstrap script again"
    elif ! gpg --keyserver keys.gnupg.net --recv C0AC1B5B; then
        echo "Failed to retrieve key from keyserver. Check internet connectivity and try running the bootstrap script again"
    else
        echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key C0AC1B5B trust
    fi

    echo "Updating the yadm repo origin URL"
    yadm remote set-url origin "git@github.com:mstiles92/dotfiles.git"
fi

echo "Bootstrap complete. If this is the first time this has run on a new install, reboot to load all new services."

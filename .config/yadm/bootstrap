#!/usr/bin/env bash

source ~/.config/yadm/packages.sh || exit $?

echo "Installing packages"
sudo pacman --noconfirm --needed -S $PACKAGES || exit $?

echo "Configuring cronie"
sudo systemctl enable --now cronie.service

echo "Configuring sshd"
sudo systemctl enable sshd.service

echo "Configuring docker"
sudo systemctl enable --now docker.service
sudo usermod -a -G docker $USER
docker buildx install

if ! command -v node > /dev/null 2>&1; then
    echo "Installing nodejs using fnm"
    fnm install v20
    fnm default v20
fi

echo "Installing sessionizer"
go install github.com/stilesdev/sessionizer@latest

echo "Setting shell to zsh"
sudo chsh -s /usr/bin/zsh $USER

if [ "$GRAPHICS_VENDOR" = 'none' ]; then
    echo "Configuring nohang"
    sudo systemctl enable --now nohang.service
else
    echo "Configuring nohang"
    sudo systemctl enable --now nohang-desktop.service

    echo "Configuring bluetooth"
    sudo systemctl enable --now bluetooth.service

    if ($IS_LAPTOP); then
        echo "Configuring thermald"
        sudo systemctl enable thermald.service

        echo "Configuring tlp"
        sudo systemctl enable tlp.service
        sudo systemctl mask systemd-rfkill.service
        sudo systemctl mask systemd-rfkill.socket
    fi

    echo "Configuring lightdm"
    sudo systemctl enable lightdm.service

    echo "Configuring thunar as the default file explorer"
    xdg-mime default thunar.desktop inode/directory

    echo "Creating screenshots directory"
    mkdir -p ~/Pictures/Screenshots

    if ! [ -f "$HOME/.cache/betterlockscreen/current/wall_resize.png" ]; then
        echo "Setting default wallpaper"
        betterlockscreen -u $HOME/Pictures/Wallpapers/arch-linux.png
    fi

    echo "Setting up GPG key"
    systemctl --user mask --now gpg-agent.service gpg-agent.socket gpg-agent-ssh.socket gpg-agent-extra.socket gpg-agent-browser.socket
    sudo systemctl enable --now pcscd
    if ! gpg --card-status; then
        echo "Failed to detect YubiKey. Plug in the YubiKey and try running the bootstrap script again"
        #elif ! gpg --keyserver keys.gnupg.net --recv C0AC1B5B; then
    elif ! bash -c 'curl https://github.com/stilesdev.gpg | gpg --import -'; then
        echo "Failed to retrieve key from keyserver. Check internet connectivity and try running the bootstrap script again"
    else
        echo "Trusting gpg key"
        gpg --list-keys --fingerprint C0AC1B5B | gawk 'NR==2 {gsub(/ /, ""); printf("%s:6:\n", $0)}' | gpg --import-ownertrust
        # echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key C0AC1B5B trust
    fi
fi

echo "Updating the yadm repo origin URL"
yadm remote set-url origin "git@github.com:stilesdev/dotfiles-gui.git"


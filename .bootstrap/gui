#!/usr/bin/env bash

# Pull in video drivers lists
source ~/.bootstrap/base-video-drivers

# Installed on all GUI systems
PKG_GUI_XORG="xorg-server xorg-xrdb xorg-xev xorg-xmodmap"
PKG_GUI_THEME="catppuccin-gtk-theme-mocha gnome-themes-extra papirus-icon-theme qt5-styleplugins xcursor-neutral"
PKG_GUI_DE="i3-gaps picom polybar udiskie ulauncher dunst betterlockscreen lightdm lightdm-slick-greeter"
PKG_GUI_FILEBROWSER="thunar tumbler ffmpegthumbnailer ark p7zip unarchiver"
PKG_GUI_UTILS="arandr autorandr xclip numlockx kcalc flameshot eog seahorse yubico-authenticator-bin zsa-udev"
PKG_GUI_APPS="google-chrome firefox visual-studio-code-bin vlc onlyoffice-bin spotify"
PKG_FONTS="otf-hasklig-nerd ttf-sourcecodepro-nerd"
PKG_AUDIO="alsa-utils pulseaudio pavucontrol pulseaudio-equalizer-ladspa playerctl python-dbus"
PKG_YUBIKEY="pinentry pcsclite ccid libusb-compat gcr libfido2"
PKG_BLUETOOTH="blueman"

PKG_LAPTOP="thermald tlp xf86-input-libinput xorg-xbacklight"


GRAPHICS='none'
IS_LAPTOP=false

case $(hostname) in
arcade*)
    GRAPHICS='intel'
    IS_LAPTOP=true
    ;;
arena*)
    GRAPHICS='nvidia'
    ;;
bismuth*)
    GRAPHICS='nvidia'
    ;;
esac

if [ "$GRAPHICS" = 'intel' ]; then
    PACKAGES="$PACKAGES $PKG_GRAPHICS_INTEL"
elif [ "$GRAPHICS" = 'nvidia' ]; then
    PACKAGES="$PACKAGES $PKG_GRAPHICS_NVIDIA"
elif [ "$GRAPHICS" = 'amd' ]; then
    PACKAGES="$PACKAGES $PKG_GRAPHICS_AMD"
else
    echo "No graphics vendor defined for host, exiting!"
    exit 1
fi

PACKAGES="$PKG_GUI_XORG $PKG_GUI_THEME $PKG_GUI_DE $PKG_GUI_FILEBROWSER $PKG_GUI_UTILS $PKG_GUI_APPS $PKG_AUDIO $PKG_FONTS $PKG_YUBIKEY $PKG_BLUETOOTH"

if ($IS_LAPTOP); then
    PACKAGES="$PACKAGES $PKG_LAPTOP"
fi

echo "Installing packages"
sudo pacman --noconfirm --needed -S $PACKAGES || exit $?

echo "Configuring nohang"
sudo systemctl disable --now nohang.service
sudo systemctl enable --now nohang-desktop.service

if ($IS_LAPTOP); then
    echo "Configuring thermald"
    sudo systemctl enable thermald.service

    echo "Configuring tlp"
    sudo systemctl enable tlp.service
    sudo systemctl mask systemd-rfkill.service
    sudo systemctl mask systemd-rfkill.socket

    echo "Configuring touchpad"
    sudo cp $HOME/.bootstrap/files/30-touchpad.conf /etc/X11/xorg.conf.d/
    sudo chown root:root /etc/X11/xorg.conf.d/30-touchpad.conf
    sudo chmod 644 /etc/X11/xorg.conf.d/30-touchpad.conf
fi

echo "Configuring lightdm"
sudo systemctl enable lightdm.service

echo "Configuring ulauncher"
systemctl --user enable --now ulauncher.service

echo "Creating screenshots directory"
mkdir -p ~/Pictures/Screenshots

if ! [ -f "$HOME/.fehbg" ]; then
    echo "Setting default wallpaper"
    betterlockscreen -u $HOME/Pictures/Wallpapers/arch-linux.png
fi

echo "Setting up GPG key"
systemctl --user mask --now gpg-agent.service gpg-agent.socket gpg-agent-ssh.socket gpg-agent-extra.socket gpg-agent-browser.socket
sudo systemctl enable --now pcscd
if ! gpg --card-status; then
    echo "Failed to detect YubiKey. Plug in the YubiKey and try running the bootstrap script again"
#elif ! gpg --keyserver keys.gnupg.net --recv C0AC1B5B; then
elif ! bash -c 'curl https://github.com/stilesdev.gpg | gpg --import -'; then
    echo "Failed to retrieve key from keyserver. Check internet connectivity and try running the bootstrap script again"
else
    echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key C0AC1B5B trust
fi

echo "Updating the vcsh repo origin URL"
vcsh gui remote set-url origin "git@github.com:stilesdev/dotfiles-gui.git"
